# Описание Проекта WebGL: Бутылка Клейна

## Обзор

Цель проекта — визуализация трёхмерной модели Бутылки Клейна с использованием технологии WebGL. Проект включает генерацию геометрии поверхности на основе параметрических уравнений, настройку камеры, применение освещения и рендеринг с помощью вершинного и фрагментного шейдеров.

## Шейдеры

Хотя исходный код шейдеров не представлен, их функциональность можно понять по используемым атрибутам и униформам в классе `KleinBottle`.

*   **Вершинный шейдер:**
    *   Принимает на вход координаты вершины (`aVertexPosition`), её цвет (`aVertexColor`) и вектор нормали (`aNormal`).
    *   Использует матрицы `uModelViewMatrix` (матрица вида) и `uProjectionMatrix` (матрица проекции) для преобразования координат вершины из локального пространства в пространство отсечения (clip space), определяя её финальную позицию на экране.
    *   Преобразует вектор нормали с помощью `uNormalMatrix` для корректного расчёта освещения в системе координат камеры.
    *   Передаёт обработанный цвет и нормаль фрагментному шейдеру (через varying-переменные).
*   **Фрагментный шейдер:**
    *   Получает интерполированные значения цвета и нормали для каждого пикселя (фрагмента) поверхности.
    *   Использует вектор нормали и униформу `uReverseLightDirection` (направление источника света, заданное в обратную сторону) для расчёта интенсивности освещения (вероятно, с помощью скалярного произведения нормали и направления света - модель Ламберта).
    *   Устанавливает финальный цвет фрагмента, комбинируя исходный цвет вершины (`aVertexColor`) с рассчитанной интенсивностью освещения и, возможно, добавляя базовый цвет для рёбер.

## Логика Рендеринга (Класс `KleinBottle`)

Класс `KleinBottle` инкапсулирует всю логику, связанную с созданием и отображением объекта.

*   **`constructor`:**
    *   Инициализирует WebGL буферы для хранения данных вершин (позиции, цвета, нормали) и индексов (для граней и рёбер).
    *   Вызывает `initBuffers()` для заполнения этих буферов.
    *   Получает и сохраняет ссылки на расположение атрибутов (`aVertexPosition`, `aVertexColor`, `aNormal`) и униформ (`uProjectionMatrix`, `uModelViewMatrix`, `uNormalMatrix`, `uReverseLightDirection`) в скомпилированной шейдерной программе.
*   **`initBuffers()`:**
    *   Вызывает вспомогательные методы (`getPositions`, `computeNormals`, `getTriangleFaces`, `getLineFaces`) для генерации массивов данных геометрии.
    *   Создаёт WebGL буферы (`gl.createBuffer`).
    *   Привязывает каждый буфер (`gl.bindBuffer`) и загружает в него соответствующие данные (`gl.bufferData`), преобразуя массивы JavaScript в типизированные массивы (`Float32Array`, `Uint16Array`).
*   **`getPositions()` / `computeNormals()`:**
    *   Реализуют параметрические уравнения Бутылки Клейна для вычисления координат `(x, y, z)` каждой вершины.
    *   `computeNormals` вычисляет векторы нормалей к поверхности в каждой вершине путем расчета частных производных параметрических уравнений по `u` и `v` и их векторного произведения. Расчеты производных разделены на две части (`u <= PI` и `u > PI`) для соответствия геометрии с самопересечением.
*   **`getTriangleFaces()` / `getLineFaces()`:**
    *   Генерируют индексные массивы, определяющие, какие вершины образуют треугольные грани для сплошной отрисовки и какие — линии для отрисовки каркаса.
*   **`render(cameraRotationX, cameraRotationY, lightIntensity)`:**
    *   Основной метод отрисовки, вызываемый в каждом кадре.
    *   Очищает экран (`gl.clear`).
    *   Настраивает параметры WebGL (тест глубины `gl.enable(gl.DEPTH_TEST)`).
    *   **Камера:** Вычисляет матрицу проекции (`mat4.perspective`) и матрицу вида (`mat4.lookAt`) на основе положения камеры.
    *   **Нормали:** Вычисляет матрицу нормалей (`mat3.normalFromMat4`).
    *   **Атрибуты:** Указывает WebGL, как извлекать данные о позициях, цветах и нормалях из буферов (`gl.bindBuffer`, `gl.vertexAttribPointer`, `gl.enableVertexAttribArray`).
    *   **Униформы:** Передаёт вычисленные матрицы (`uProjectionMatrix`, `uModelViewMatrix`, `uNormalMatrix`) и параметры освещения (`uReverseLightDirection`, `lightIntensity`) в шейдеры (`gl.uniformMatrix*`, `gl.uniform3fv`).
    *   **Отрисовка:** Вызывает `gl.drawElements` дважды: один раз с `gl.TRIANGLES` для отрисовки граней и второй раз с `gl.LINES` для отрисовки рёбер поверх граней (предварительно отключив атрибут цвета вершин и задав цвет рёбер).

## Камера

Используется перспективная проекция (`mat4.perspective`), имитирующая искажение перспективы.
Положение камеры (`eye`) определяется в сферических координатах на основе углов `cameraRotationX`, `cameraRotationY` и фиксированного расстояния (`distance`). Камера всегда направлена на центр координат (`center = [0, 0, 0]`) с вектором верха `up = [0, 1, 0]`. Матрица вида вычисляется с помощью `mat4.lookAt(modelViewMatrix, eye, center, up)`.

## Освещение

Реализована простая модель направленного света. Направление задаётся вектором `lightDir = [-1, 1, 1]` (до нормализации и масштабирования). Этот вектор нормализуется и масштабируется с помощью `lightIntensity`, а затем передаётся в шейдер как `uReverseLightDirection`. В фрагментном шейдере, вероятно, вычисляется скалярное произведение этого направления с нормалью поверхности для определения яркости диффузного отражения. 